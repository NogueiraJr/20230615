// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// S I S T E M A S 
  model Systems {
    id                 String      @id @unique
    seq                String
    name               String
    description        String?

    active             Boolean     @default(true)

    systemMenuModule   SystemMenuModule[]
    userOperations     UserOperations[]
    actions            Actions[]
    actionsFlowPoint   ActionsFlowPoints[]
    items           Items[]
    ThingTypes ThingTypes[]
  }

// M E N U S 
  model Menus {
    id                 String      @id @unique
    seq                String
    ref                String
    name               String
    description        String?
    
    active             Boolean     @default(true)

    systemMenuModule   SystemMenuModule[]
  }

// M Ó D U L O S 
  model Modules {
    id                 String      @id @unique
    seq                String
    ref                String
    name               String
    description        String?
    
    active             Boolean     @default(true)

    systemMenuModule   SystemMenuModule[]
  } 

// S I S T E M A   X   M E N U   X   M Ó D U L O 
  model SystemMenuModule {
    id          String      @id @unique

    systemId    String? 
    system      Systems?    @relation(fields: [systemId], references: [id])

    menuId      String? 
    menu        Menus?      @relation(fields: [menuId], references: [id])

    moduleId    String? 
    module      Modules?    @relation(fields: [moduleId], references: [id])
    
    active      Boolean     @default(true)

    userSystemMenuModule    UserSystemMenuModule[]

  } 

  model UserSystemMenuModule {
    id                  String    @id @default(cuid())

    userId              String 
    user                Users     @relation(fields: [userId], references: [id])

    systemMenuModuleId  String 
    systemMenuModule    SystemMenuModule  @relation(fields: [systemMenuModuleId], references: [id])
  
    active              Boolean   @default(true)
    createAt            DateTime  @default(now())
    updatedAt           DateTime  @updatedAt
    deletedAt           DateTime?
  }

// T A G S
  model UserTags {
    id          String      @id @default(cuid())
    tag         String
    description String
    userId     String      @map("userId")
    
    active      Boolean     @default(true)
    createAt    DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    deletedAt   DateTime?

    users       Users       @relation(fields: [userId], references: [id])

  }

// U S E R S 
  model Users {
    id          String      @id @default(cuid())
    userTypeId  String
    name        String
    usr         String
    psw         String
    emails      UserEmails[]
    phones      UserPhones[]

    tags        String?
    active      Boolean     @default(true)
    createAt    DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    deletedAt   DateTime?

    userType    UserTypes   @relation(fields: [userTypeId], references: [id])
    user        Users?      @relation("user", fields: [userId], references: [id])
    userId      String?
    users       Users[]     @relation("user")
    userTags    UserTags[]

    userSystemMenuModule UserSystemMenuModule[]

    clients     UserClients[]
    suppliers   UserSuppliers[]
    partners    UserPartners[]
    
    rentals     UserOperations[]
    
    items     Items[]
    Things Things[]

    userActionsFlowPoint UserActionsFlowPoint[]
    actionsFlowPoints ActionsFlowPoints[]

  }

  model UserTypes {
    id          String      @id @unique
    name        String
    description String?
    active      Boolean     @default(true)
    createAt    DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    deletedAt   DateTime?
    users       Users[]
  }
// U S E R S  E M A I L S 
  model UserEmails {
    id              String         @id @default(cuid())
    email           String
    userId          String
    userEmailTypeId String

    tags            String?
    active          Boolean        @default(true)
    createAt        DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    deletedAt       DateTime?
    
    user            Users          @relation(fields: [userId], references: [id])
    UserEmailType   UserEmailTypes @relation(fields: [userEmailTypeId], references: [id])
  }

  model UserEmailTypes {
    id          String       @id @unique
    name        String
    description String?
    active      Boolean      @default(true)
    createAt    DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    deletedAt   DateTime?
    userEmails  UserEmails[]
  }
// U S E R S  P H O N E S 
  model UserPhones {
    id              String         @id @default(cuid())
    phone           String
    userId          String
    userPhoneTypeId String 

    tags            String?
    active          Boolean        @default(true)
    createAt        DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    deletedAt       DateTime?
    
    user            Users          @relation(fields: [userId], references: [id])
    userPhoneType   UserPhoneTypes @relation(fields: [userPhoneTypeId], references: [id])
  }

  model UserPhoneTypes {
    id          String       @id @unique
    name        String
    description String?
    active      Boolean      @default(true)
    createAt    DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    deletedAt   DateTime?
    phones      UserPhones[]
  }
// C L I E N T S 
  model Clients {
    id          String      @id @default(cuid())
    name        String

    tags        String?
    active      Boolean     @default(true)
    createAt    DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    deletedAt   DateTime?

    users                 UserClients[]

  }

  model UserClients {
    id          String      @id @default(cuid())
    userId     String      @map("userId")
    clientId   String      @map("clientId")
    
    user        Users       @relation(fields: [userId], references: [id])
    client      Clients     @relation(fields: [clientId], references: [id])

    UserActions  UserActions[]
    userActionsFlowPoint UserActionsFlowPoint[]
    thingFeatures ThingFeatures[]

    @@unique([userId, clientId])

  }

// S U P P L I E R S 
  model Suppliers {
    id          String      @id @default(cuid())
    name        String

    tags        String?
    active      Boolean     @default(true)
    createAt    DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    deletedAt   DateTime?

    users       UserSuppliers[]
  }

  model UserSuppliers {
    id           String      @id @default(cuid())
    userId       String      @map("userId")
    supplierId  String      @map("supplierId")
    
    user        Users        @relation(fields: [userId], references: [id])
    supplier    Suppliers    @relation(fields: [supplierId], references: [id])

    @@unique([userId, supplierId])

  }
// P A R T N E R 
  model Partners {
    id          String      @id @default(cuid())
    name        String

    tags        String?
    active      Boolean     @default(true)
    createAt    DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    deletedAt   DateTime?

    users       UserPartners[]
  }

  model UserPartners {
    id           String      @id @default(cuid())
    userId      String      @map("userId")
    partnerId  String      @map("partnerId")
    
    user        Users        @relation(fields: [userId], references: [id])
    partner    Partners    @relation(fields: [partnerId], references: [id])

    @@unique([userId, partnerId])

  }
// I T E M S
  model Items {
    id                  String       @id @default(cuid())
    name                String
    description         String?
    itemTypeId       String

    quantity            Int          @default(1)
    price               Decimal      @default(0.00)

    tags                String?
    active              Boolean      @default(true)
    createAt            DateTime     @default(now())
    updatedAt           DateTime     @updatedAt
    deletedAt           DateTime?
    
    userId              String       @map("userId")
    systemId            String       @map("systemId")

    user                Users        @relation(fields: [userId], references: [id])
    system              Systems      @relation(fields: [systemId], references: [id])

    itemType         ItemTypes @relation(fields: [itemTypeId], references: [id])

    UserActionItems  UserActionItems[]
  }

  model ItemTypes {
    id          String       @id @unique
    name        String
    description String?

    active      Boolean      @default(true)

    items    Items[]
  }
// U S E R   O P E R A T I O N
  model UserOperations {
    id           String      @id @default(cuid())
    description  String
    notes        String?

    priceActions Decimal?
    priceCharged Decimal?

    userId       String      @map("userId")
    systemId    String      @map("systemId")
    
    user         Users       @relation(fields: [userId], references: [id])
    system       Systems     @relation(fields: [systemId], references: [id])

    tags         String?
    active       Boolean     @default(true)
    createAt     DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    deletedAt    DateTime?

    userActions  UserActions[]
    thingFeatures ThingFeatures[]

    userActionsFlowPoint UserActionsFlowPoint[]

    @@unique([id, userId, systemId])

  }
  
  model UserActions {
    id                 String      @id @default(cuid())
    userOperationId    String      @map("userOperationId")
    userClientId       String      @map("userClientId")
    actionId           String      @map("actionId")
    userActionId       String?

    description        String
    notes              String?

    scheduledAt        DateTime?
    executedAt         DateTime?
    finishedAt         DateTime?

    priceItems      Decimal?

    tags               String?
    active             Boolean     @default(true)
    createAt           DateTime    @default(now())
    updatedAt          DateTime    @updatedAt
    deletedAt          DateTime?

    userOperations     UserOperations @relation(fields: [userOperationId], references: [id])
    userClient         UserClients @relation(fields: [userClientId], references: [id])
    actions            Actions @relation(fields: [actionId], references: [id])
    userAction         UserActions?      @relation("UserAction", fields: [userActionId], references: [id])

    userActionItems   UserActionItems[]
    userActions        UserActions[]     @relation("UserAction")

    ThingFeatures ThingFeatures[]

  }
  
  model UserActionsFlowPoint {
    id                 String      @id @default(cuid())
    userOperationId    String      @map("userOperationId")
    userClientId       String      @map("userClientId")
    actionId           String      @map("actionId")
    actionFlowPointId  String      @map("actionFlowPointId")
    
    notes              String?

    checkedAt          DateTime?
    checkedUserId      String?     @map("checkedUserId")

    createAt           DateTime    @default(now())
    updatedAt          DateTime    @updatedAt

    userOperations     UserOperations @relation(fields: [userOperationId], references: [id])
    userClient         UserClients @relation(fields: [userClientId], references: [id])
    actions            Actions @relation(fields: [actionId], references: [id])
    actionsFlowPoints  ActionsFlowPoints @relation(fields: [actionFlowPointId], references: [id])
    users              Users? @relation(fields: [checkedUserId], references: [id])
    
  }
  
  model ActionsFlowPoints {
    id              String    @id @default(cuid())
    systemId        String    @map("systemId")
    userId          String    @map("userId")

    moment          String

    seq             String
    name            String
    description     String?

    active          Boolean   @default(true)
    createAt        DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    deletedAt       DateTime?

    system          Systems   @relation(fields: [systemId], references: [id])
    users           Users     @relation(fields: [userId], references: [id])

    userActionsFlowPoint UserActionsFlowPoint[]

  } 

  model Actions {
    id          String    @id @default(cuid())
    action      String
    systemId    String    @map("systemId")
    
    seq          String
    name         String
    description  String?

    active       Boolean   @default(true)

    system       Systems   @relation(fields: [systemId], references: [id])
  
    userActions  UserActions[]
    userActionsFlowPoint UserActionsFlowPoint[]

    @@unique([id, systemId])

  } 

  model UserActionItems {
    id             String    @id @default(cuid())
    itemId      String
    userActionId   String

    seq            String
    description    String
    quantity       Int       @default(0)

    tags           String?
    active         Boolean   @default(true)
    createAt       DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    deletedAt      DateTime?

    item        Items     @relation(fields: [itemId], references: [id])
    userAction     UserActions  @relation(fields: [userActionId], references: [id])
  }


// =============================================
// S E R V I Ç O S   &   C A R A C T E R Í S T I C A S
// =============================================

// TIPOS DE SERVIÇOS (locacao_roupas, petshop, etc)
model ThingTypes {
  id          String   @id @default(cuid())
  systemId    String   @map("systemId")
  seq         String
  name        String
  description String?
  
  active      Boolean  @default(true)
  createAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  system      Systems  @relation(fields: [systemId], references: [id])
  Things    Things[]
  ThingFeatureFields ThingFeatureFields[] // ← RELAÇÃO INVERSA ADICIONADA
  
  @@unique([systemId, seq])
}

// SERVIÇOS (instâncias de serviços para usuários)
model Things {
  id             String   @id @default(cuid())
  ThingTypeId  String   @map("ThingTypeId")
  userId         String   @map("userId")
  
  notes          String?
  
  active         Boolean  @default(true)
  createAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?
  
  ThingType    ThingTypes @relation(fields: [ThingTypeId], references: [id])
  user           Users        @relation(fields: [userId], references: [id])
  ThingFeatures ThingFeatures[]
  
  @@unique([ThingTypeId, userId, createAt])
}

// DEFINIÇÕES DAS CARACTERÍSTICAS POR TIPO DE SERVIÇO
model ThingFeatureFields {
  id            String   @id @default(cuid())
  ThingTypeId String   @map("ThingTypeId")
  seq           String
  name          String
  description   String?
  displayName   String
  
  dataType      String   // string, number, boolean, date, json
  isRequired    Boolean  @default(false)
  validationRules String?
  
  active        Boolean  @default(true)
  createAt      DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  
  ThingType   ThingTypes @relation(fields: [ThingTypeId], references: [id])
  ThingFeatures ThingFeatures[]
  
  @@unique([ThingTypeId, seq])
}

// VALORES DAS CARACTERÍSTICAS (EAV - Entity Attribute Value)
model ThingFeatures {
  id                       String   @id @default(cuid())
  ThingFeatureFieldId String @map("ThingFeatureFieldId")
  userClientId      String @map("UserClientId")

  userOperationId     String?         @map("userOperationId")
  userActionId        String?         @map("userActionId")
  ThingId                String?   @map("ThingId")
  
  valueString              String?
  valueNumber              Float?
  valueBoolean             Boolean?
  valueDate                DateTime?
  valueJson                Json?
  
  active                   Boolean  @default(true)
  createAt                 DateTime @default(now())
  updatedAt                DateTime @updatedAt
  deletedAt                DateTime?

  userClient         UserClients @relation(fields: [userClientId], references: [id])
  userActions        UserActions? @relation(fields: [userActionId], references: [id]) // ← RELAÇÃO MANY-TO-ONE
  
  userOperation      UserOperations? @relation(fields: [userOperationId], references: [id]) // ← RELAÇÃO MANY-TO-ONE
  ThingFeatureField  ThingFeatureFields @relation(fields: [ThingFeatureFieldId], references: [id])
  Thing              Things? @relation(fields: [ThingId], references: [id])
  
  @@index([ThingId])
  @@index([userOperationId])
  @@index([userActionId])
}